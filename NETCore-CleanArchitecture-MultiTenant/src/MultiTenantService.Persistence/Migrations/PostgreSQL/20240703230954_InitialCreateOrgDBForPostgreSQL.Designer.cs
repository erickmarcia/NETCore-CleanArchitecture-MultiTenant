// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultiTenantService.Persistence.DataBase;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MultiTenantService.Persistence.Migrations.PostgreSQL
{
    [DbContext(typeof(OrgDbContext))]
    [Migration("20240703230954_InitialCreateOrgDBForPostgreSQL")]
    partial class InitialCreateOrgDBForPostgreSQL
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MultiTenantService.Domain.Entities.Organizacion.OrganizacionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<Guid?>("UsuarioActualizacionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioEliminacionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Organizacion", "Organizacion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 7, 3, 17, 9, 54, 385, DateTimeKind.Unspecified).AddTicks(9983), new TimeSpan(0, -6, 0, 0, 0)),
                            Nombre = "Organizacion1",
                            UsuarioId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("MultiTenantService.Domain.Entities.Usuario.UsuarioEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<Guid?>("UsuarioActualizacionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioEliminacionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("Usuarios", "Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            FechaCreacion = new DateTimeOffset(new DateTime(2024, 7, 3, 17, 9, 54, 386, DateTimeKind.Unspecified).AddTicks(116), new TimeSpan(0, -6, 0, 0, 0)),
                            OrganizacionId = 1,
                            Password = "Admin.123",
                            UserName = "Admin",
                            UsuarioId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("MultiTenantService.Domain.Entities.Usuario.UsuarioEntity", b =>
                {
                    b.HasOne("MultiTenantService.Domain.Entities.Organizacion.OrganizacionEntity", "Organizacion")
                        .WithMany("Usuario")
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("MultiTenantService.Domain.Entities.Organizacion.OrganizacionEntity", b =>
                {
                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
